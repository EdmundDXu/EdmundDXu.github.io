---
author: edmund
comments: true
date: 2018-04-02 10:53:21+00:00
layout: post
link: http://118.25.17.78/blog/2018/04/02/linux%e7%94%a8%e6%88%b7%e5%92%8c%e7%bb%84%e7%ae%a1%e7%90%86%e6%a6%82%e8%bf%b0/
slug: linux%e7%94%a8%e6%88%b7%e5%92%8c%e7%bb%84%e7%ae%a1%e7%90%86%e6%a6%82%e8%bf%b0
title: Linux用户和组管理概述
wordpress_id: 150
categories:
- Linux随笔
post_format:
- 日志
tags:
- linux
- 用户管理
---

## 一、Linux用户（user）和用户组（group）的概念




### 1、用户（user）




Linux系统是一个多用户多任务的分时操作系统，任何一个要使用系统资源的用户，都必须首先向系统管理员申请一个账号，然后以这个账号的身份进入系统。




用户的账号一方面可以帮助系统管理员对使用系统的用户进行跟踪，并控制他们对系统资源的访问；另一方面也可以帮助用户组织文件，并为用户提供安全性保护。




每个用户都拥有一个唯一的用户名和各自的口令。




用户在登录时键入正确的用户名和口令后，就能够进入系统和自己的主目录。




需要注意的是，由于操作系统和人对符号的敏感程度不同，所以识别用户的方法也是有区别的：人使用易识别的字符串（用户名）作为用户的标识，而操作系统使用数字（UID）作为用户的标识。用户组也有相同的概念，也有用户组名和GID分别提供给人和操作系统。




Linux中，用户分为管理员和普通用户。




管理员的用户名为root，UID为0。




普通用户的用户名都是自定义的，普通用户分为两类：系统用户和登录用户。系统用户的UID为**SYS_UID_MIN**到**SYS_UID_MAX**之间，而登录用户的UID介于**UID_MIN** 和**UID_MAX**之间，这4个变量的定义在**/etc/login.defs**中，例如在CentOS 7系统中，





<blockquote>

> 
> UID_MIN 1000
UID_MAX 60000
> 
> 

> 
> SYS_UID_MIN 201
SYS_UID_MAX 999
> 
> 



> 
> * * *
> 
> 

</blockquote>




系统用户一般为某个程序创建，用于以某种特定的权限运行、管理某个程序或系统资源，且系统用户一般不需要登录。




登录用户一般为某个人创建，用于交互式登录系统，实现类似windows的系统管理。





### 2、用户组（group）




用户组（group）就是具有相同特征的用户（user）的集合体。每个用户都有一个用户组，系统可以对一个用户组中的所有用户进行集中管理。




Linux中，用户组分为管理员组和普通用户组。




管理员组的用户组名为root，GID为0。




普通用户组也分为 两类：系统用户组和登录用户组。系统用户组的GID为**SYS_GID_MIN**到**SYS_GID_MAX**之间，而登录用户组的GID介于**GID_MIN** 和**GID_MAX**之间，这4个变量的定义在**/etc/login.defs**中。其概念类似于上述的用户（user），故不再赘述。






* * *




以上的用户组都是针对于某个用户组来讲的，而针对于某个用户所属的用户组，也有不同的类别：初始用户组和附加用户组。




    
    <strong>注：初始用户组也被称为primary group、first group或initial login group，用户的默认组，用户的gid所标识的组。</strong>




比如我有一个用户叫做gentoo，那么在创建该用户时，如果不指定初始用户组，那么默认该初始用户组和该用户同名，即也叫作gentoo。在该用户登录进系统时，用户可以立刻获得初始用户组的权限而不需要额外指定。




而附加用户组则不同，我们知道用户可以属于多个用户组，而除了初始用户组之外的用户组称为附加用户组，附加用户组需要通过一些额外操作来指定。




我们可以通过id命令简单的查看一下该用户所属的组。





<blockquote>

> 
> [root@node1 sbin]# id gentoo
uid=1001(gentoo) gid=1003(gentoo) groups=1003(gentoo),1001(distro),1002(linux)
> 
> 
</blockquote>




gid=1003(gentoo)表示gentoo用户的初始用户组为gentoo，groups=1003(gentoo),1001(distro),1002(linux)表示gentoo用户所属的所有组，而gentoo组为初始用户组，故distro,linux为附加用户组。





## 二、进程的概念及用户与进程的关系




说完用户和组的概念，就可以谈一谈进程的概念了。




什么是进程？进程就是运行中的程序。我们所谓的对计算机的操作，比如双击某个图标或者通过命令提示符键入命令后敲回车，其结果实际上是创建了进程。所谓用户操作计算机，实际上是用户发起进程来代理用户对计算机的操作，所以，**进程就是用户操作计算机的代理**。我们所谓的以某个用户的身份去操作计算机，实际上是让进程以某个用户的身份去操作计算机。




比如，我们执行ls程序，那么就相当于发起了一个ls进程，并让这个进程以发起者的身份去运行。





<blockquote>

> 
> [edmund@node1 ~]$ ls /home
edmund gentoo
> 
> 
</blockquote>




如果用户的权限不足以调度某个计算机资源，那么相应的，其发起的进程同样无法操作该计算机资源。





<blockquote>

> 
> [edmund@node1 ~]$ ls /root
ls: cannot open directory /root: Permission denied
> 
> 
</blockquote>




所以，进程访问计算机资源的权限取决于进程的发起者，即发起这个进程的用户。






* * *





### 有效用户组




我们已经知道进程会以发起者的身份来运行，那么当我创建一个文件时，该文件的拥有者应该为我当前登录的用户，但是如果此时我属于多个用户组，那么这个文件的所属的组应该是谁？这就需要提到一个有效用户组的概念了。有效用户组决定了创建文件时该文件所属的组，在用户登录进系统时，会自动设置有效用户组为初始用户组，通过groups命令可以查看。





<blockquote>

> 
> [gentoo@node1 ~]$ groups
gentoo distro linux
> 
> 
</blockquote>




该命令显示当前用户所属的所有用户组，且第一个为有效用户组。我们创建一个文件来试试看。





<blockquote>

> 
> [gentoo@node1 ~]$ touch gentoo1
[gentoo@node1 ~]$ ls -l
total 0
-rw-rw-r--. 1 gentoo gentoo 0 Apr 1 01:14 gentoo1
> 
> 
</blockquote>




果然属组为gentoo。那么如何切换有效用户组呢？可以通过newgrp命令。（注意：newgrp命令会通过打开一个子shell来切换有效用户组）





<blockquote>

> 
> [gentoo@node1 ~]$ newgrp linux
[gentoo@node1 ~]$ groups
linux distro gentoo
> 
> 
</blockquote>




可以看到，有效用户组已经切换成了linux。此时我们尝试新创建一个文件。





<blockquote>

> 
> [gentoo@node1 ~]$ touch linux
[gentoo@node1 ~]$ ls -l
total 0
-rw-rw-r--. 1 gentoo gentoo 0 Apr 1 01:14 gentoo1
-rw-r--r--. 1 gentoo linux 0 Apr 1 01:15 linux
> 
> 
</blockquote>




果然，文件的属组已经是linux了。





## 三、Linux用户（user）和用户组（group）相关的配置文件




### 1、与用户（user）相关的配置文件




#### /etc/passwd:  记录用户及其属性信息。




该文件的每一行都表示一个用户，并且包含7个用:分隔的字段。




**name:password:UID:GID:comment:directory:shell**




**name** 用户的登录名




**passwd** 用户的密码（在早期的Unix中，密码直接放在**/etc/passwd**文件中，但是由于这个文件对所有用户都是可读的，所以为了安全性，将密码放在了**/etc/shadow**文件中，且这个字段用**x**代替）




**UID** 用户的user ID




**GID** 用户的初始/主用户组的group ID




**comment** 对于该用户的一些简要描述，类似于注释




**directory** 用户的家目录：用户登录后所处的初始目录




**shell** 用户登录后运行的第一个程序，一般来说应该为shell程序






* * *





#### /etc/shadow: 记录用户密码及密码相关属性信息 。




该文件的每行都代表一个用户密码相关的配置信息，并且包含9个用:分隔的字段。




**login name:encrypted password:date of last password change:minimum password age:maximum password age:password warning period:password inactivity period:account expiration date:reserved field**




**login name** 用户的登录名，必须为系统中存在的用户




**encrypted password** 加密后的密码，以**$ID$salt$encrypted**形式展示，ID表示加密方法，salt为加密时使用的杂质，encrypted为加密后的用户密码




**date of last password change** 上一次的密码修改时间，从1970年1月1日开始到上一次密码修改日期之间间隔的天数，0有特殊含义，表示该用户在下次登录时必须修改密码，该字段为空表示密码时间功能被禁用。




**minimum password age** 最小密码使用时间，用户在修改密码后能够再次修改密码的间隔天数，0或者空表示密码可以随时修改




**maximum password age** 最大密码有效时间，用户在修改密码后，该密码所能使用的最长时间，超过该时间后，密码将仍然有效，直到超过密码禁用日期，在密码禁用期到来之前，最大密码有效时间超过之后，在用户下次登录时系统会要求用户修改密码。该字段为空表示没有最大密码有效时间，没有密码警告期，没有密码禁用期。如果最大密码有效时间小于最小密码使用时间，用户将不能够修改密码。




**password warning period** 密码过期警告期，在最大密码有效期到来前的一段时间，系统会提示用户密码即将过期，这段时间的天数就是密码过期警告期。字段为空或者0表示没有密码警告期。




**password inactivity period** 密码禁用期，在超过最大密码有效期后的一段时间，系统将要求用户在其下次登录时修改其密码，这段时间的天数就是密码禁用期。如果超过了密码禁用期，该用户将无法使用其密码登陆，必须联系系统管理员。该字段为空表示没有强制密码过期。




**account expiration date** 账户过期日期，账户过期的日期，以从1970年1月1日开始的天数计算。账户过期不同于密码过期，账户过期表示用户无法登陆，密码过期表示用户无法使用其密码登录。该字段为空表示用户永不过期，应该避免使用0，因为0既会被理解为永不过期，也会被理解为在1970年1月1日过期。




**reserved field** 保留字段,目前没有作用，留作以后使用





### 2、与用户组（group）相关的配置文件




**/etc/group: 记录用户组及其属性信息和其包含的用户。**




该文件的每一行都表示一个用户组，并且包含以:分隔的4个字段




**group_name:password:GID:user_list**




**group_name** 用户组名




**password** 用于登录到该用户组时所需的密码，和**/etc/passwd**中的第二个字段相同，已经转移到**/etc/gshadow**中，此处用**x**替代。




**GID** 用户组的group ID




**user_list** 该用户组包含的用户，多个用户之间用逗号分隔






* * *




**/etc/gshadow: 记录用户组密码、用户组管理员和其包含的用户。**




该文件的每一行都代表和管理员相关的用户组信息，并且包含以:分隔的4个字段




**group name:encrypted password:administrators:members**




**group name** 用户组名，该组名必须存在




**encrypted password** 加密后的密码，该字段的解释参考**/etc/shadow**中第二个字段的解释。当一个用户不是某个组的成员，但是希望临时获得该用户组的权限时，可以使用**newgrp**命令(参考第四节中的newgrp命令)，输入该密码后即可获得该用户组的权限。该字段为空时，只有组成员才能获取该组的权限。**!**开头的密码字段表示该密码被锁定。**!**后面的剩余字符表示锁定前的密码。




**administrators** 管理员列表，管理员可以修改组密码和组成员，管理员有和组成员一样的权限。多个管理员之间用逗号分隔。




**members** 成员列表，用户组成员可以获取该用户组的权限而不需要输入密码，且该列表必须与**/etc/group**中相应的**user_list**一致。多个用户之间用逗号分隔。





## 四、Linux用户（user）和用户组（group）相关的管理命令




在讲完Linux用户（user）和用户组（group）相关的知识和配置文件的解释后，命令就很容易理解了。因为这些命令实际上就是针对某些配置文件中的字段进行修改。





### 1、用户创建: useradd




**NAME**




useradd - create a new user or update default new user information




**SYNOPSIS**




useradd [options] LOGIN




useradd -D




useradd -D [options]




useradd命令有三种用法，这里先着重讲第一个:




不加任何选项，直接使用默认配置添加一个用户。





<blockquote>

> 
> [root@node1 ~]# useradd hadoop
[root@node1 ~]# tail -1 /etc/passwd
hadoop:x:1001:1001::/home/hadoop:/bin/bash
[root@node1 ~]# tail -1 /etc/group
hadoop:x:1001:
[root@node1 ~]# tail -1 /etc/shadow
hadoop:!!:17623:0:99999:7:::
> 
> 
</blockquote>




可以看到，用户已经成功添加到系统中了，且自动创建了用户组和影子信息。如果我们不想使用默认的配置，那我们可以通过选项指定这些信息。




**常用选项**




**-u, --uid UID** 指定用户的UID，不能大于**UID_MAX**。默认使用大于等于**UID_MIN**，且大于任何其他用户ID的最小值。这些变量定义在**/etc/login.defs**中。




**-g, --gid GROUP** 用户初始组的组名或GID。组名和组号码必须已经存在。默认创建一个和用户名同名的组




**-G, --groups GROUP1[,GROUP2,...[,GROUPN]]]** 指定用户的附加组，多个附加组之间使用逗号分隔，中间不能有空白字符，组必须已经存在。默认用户只属于初始组。




**-c, --comment COMMENT** 注释信息，通常是一些登录用户的描述或者是用户的全名。




**-d, --home-dir HOME_DIR** 指定用户的家目录。默认家目录为BASEDIR下创建的与LOGIN同名的目录。BASEDIR在**/etc/default/useradd**中由**HOME**变量定义。




**-s, --shell SHELL** 指定用户的登录shell。默认会使用/etc/default/useradd定义的SHELL变量来指定。




**-r, --system** 创建一个系统用户。默认使用大于等于**SYS_UID_MIN**，且大于任何其他用户 ID 的最小值,不能大于**SYS_UID_MAX** 。这些变量定义在/etc/login.defs中。需要注意的是，系统用户将不会被创建家目录，除非指定了-m 选项。




**默认值查看**




我们可以通过**useradd -D**命令直接查看默认值，也可以去查看**/etc/default/useradd**文件去查看默认值。





<blockquote>

> 
> [root@node1 ~]# useradd -D
GROUP=100
HOME=/home
INACTIVE=-1
EXPIRE=
SHELL=/bin/bash
SKEL=/etc/skel
CREATE_MAIL_SPOOL=yes
> 
> 

> 
> [root@node1 ~]# cat /etc/default/useradd 
# useradd defaults file
GROUP=100
HOME=/home
INACTIVE=-1
EXPIRE=
SHELL=/bin/bash
SKEL=/etc/skel
CREATE_MAIL_SPOOL=yes
> 
> 
</blockquote>




**默认值设定**




-b, --base-dir BASE_DIR 用于设定HOME的基目录，即/etc/default/useradd 中的HOME变量




-e, --expiredate EXPIRE_DATE 用于设定账户过期日期，即/etc/default/useradd 中的EXPIRE 变量




-f, --inactive INACTIVE 用于设定账户密码过期天数，即/etc/default/useradd 中的INACTIVE 变量




-s, --shell SHELL 用于设定账户的登录shell，即/etc/default/useradd 中的SHELL 变量





<blockquote>

> 
> [root@node1 ~]# useradd -D -s /bin/csh
[root@node1 ~]# useradd -D
GROUP=100
HOME=/home
INACTIVE=-1
EXPIRE=
SHELL=/bin/csh
SKEL=/etc/skel
CREATE_MAIL_SPOOL=yes
> 
> 
</blockquote>




可以看见，默认的shell已经被改变了。






* * *





### 2、用户组创建: groupadd




### **NAME**




groupadd - create a new group




**SYNOPSIS**




groupadd [options] group




groupadd的用法很简单，且大部分选项都和useradd中相同。





<blockquote>

> 
> [root@node1 ~]# groupadd gentoo
[root@node1 ~]# tail -1 /etc/group
gentoo:x:1002:
[root@node1 ~]# tail -1 /etc/gshadow
gentoo:!::
> 
> 
</blockquote>




可以看到，用户组gentoo已经创建成功了。




**常用选项**




**-g, --gid GID** 用户组的GID，不能大于**GID_MAX**。默认使用大于等于**GID_MIN**，且大于任何其他用户组 ID的 最小值。这些变量定义在**/etc/login.defs**中。




**-r, --system** 创建一个系统用户组。默认使用大于等于**SYS_GID_MIN**，且大于任何其他用户组ID 的最小值,不能大于**SYS_GID_MAX** 。这些变量定义在**/etc/login.defs**中。






* * *





### 3、用户属性修改: usermod




**NAME**




usermod - modify a user account




**SYNOPSIS**




usermod [options] LOGIN




由于usermod修改的其实就是/etc/passwd中的某些字段的内容，故usermod的选项与useradd基本一致，只是useradd是在/etc/passwd中添加一行，而usermod是修改一行而已。





<blockquote>

> 
> [root@node1 ~]# usermod -s /bin/csh hadoop
[root@node1 ~]# tail -1 /etc/passwd
hadoop:x:1001:1001::/home/hadoop:/bin/csh
> 
> 
</blockquote>




可以看到hadoop用户的登录shell已经被修改了。




**常用选项**




**-l, --login NEW_LOGIN** 修改用户的登录名，即用户名。需要注意的是，用户家目录或者用户mailbox中的目录名并不会改变。




**-u, --uid UID** 修改用户的UID。UID的限制参考useradd中的-u选项。在使用该选项后，用户的mailbox和用户主目录中的所有文件的UID都会被自动修改为指定UID，而位于用户主目录之外的文件则需要手动进行修改。




**-g, --gid GROUP** 修改用户的初始登录组，该组必须存在。用户家目录中任何属于修改前的初始组的文件将交给新的初始组所有，而位于用户主目录之外的文件则需要手动修改。




**-G, --groups GROUP1[,GROUP2,...[,GROUPN]]]** 修改用户的附加组，多个附加组之间使用逗号分隔，中间不能有空白字符，组必须已经存在，默认会将用户原本的附加组覆盖。**如果不想覆盖原有的附加组，可以与-a选项一起使用，可以将group_list追加至原有的附加组。**




**-c, --comment COMMENT** 修改用户的注释信息，通常会使用**chfn**命令对该字段进行修改。




**-d, --home HOME_DIR** 修改用户的家目录，该目录必须手动创建,且该目录中用户自己的配置文件也必须手动创建。**如果指定了-m选项，原本用户家目录中的所有内容将被迁移至这个新的家目录中，该目录如果不存在将会被自动创建。**




**-s, --shell SHELL** 修改用户的登录shell。




**-L, --lock** 锁定用户的密码，用户将无法使用密码登录系统。实际上只是在**/etc/shadow**中的密码字段最前面加上!，表示密码字段无效。




**-U, --unlock** 解锁用户的密码，使被锁定的用户可以使用密码登录系统。实际上只是在**/etc/shadow**中的密码字段最前面去掉!（如果有的话）。






* * *





### 4、用户密码及密码属性修改: passwd




**NAME**




passwd - update user's authentication tokens




**SYNOPSIS**




** passwd [-k] [-l] [-u [-f]] [-d] [-e] [-n mindays] [-x maxdays] [-w warndays] [-i inactivedays] [-S] [--stdin] [username]**




直接使用passwd不加任何选项和参数表示修改自己的密码，此种用法任何用户都可以使用，**passwd USERNAME**表示修改指定用户的密码，只有管理员权限才能使用。




在普通用户使用passwd修改自己的密码时需要注意，此前这个用户必须有可用的密码。





<blockquote>

> 
> [hadoop@node1 ~]$ passwd
Changing password for user hadoop.
Changing password for hadoop.
(current) UNIX password:
New password:
Retype new password:
passwd: all authentication tokens updated successfully.
> 
> 
</blockquote>




root用户可以修改普通用户的密码，且无视密码强度限制。





<blockquote>

> 
> [root@node1 ~]# passwd hadoop
Changing password for user hadoop.
New password:
BAD PASSWORD: The password is shorter than 8 characters
Retype new password:
passwd: all authentication tokens updated successfully.
> 
> 
</blockquote>




**常用选项**




** -l, --lock** 锁定用户密码。该选项只有root用户可以使用，实际上只是在**/etc/shadow**中的密码字段最前面加上!，表示密码字段无效。需要注意的是，该用户仍然可以通过其他认证手段登录，比如ssh公钥认证登录。可以通过**chage -E 0**完全锁定该账户。




**-u, --unlock** 解除锁定的用户密码，该选项只有root用户可以使用，实际上只是去掉**/etc/shadow**的密码字段前面的!,该命令无法解锁只有!作为密码的账户。




**-n, --minimum DAYS** 指定密码的 最小密码使用时间，以天数表示，该选项只有root用户可以使用。该选项需要开启密码时间功能**（密码时间功能详见/etc/passwd文件的解释）。**




**-x, --maximum DAYS** 指定密码的 最大密码有效时间，以天数表示，该选项只有root用户可以使用。该选项需要开启密码时间功能。




**-w, --warning DAYS** 指定密码的 密码过期警告期，以天数表示，该选项只有root用户可以使用。该选项需要开启密码时间功能。




**-i, --inactive DAYS** 指定密码的 密码禁用期， 以天数表示，该选项只有root用户可以使用。该选项需要开启密码时间功能。




** --stdin** 指明passwd命令将会从标准输入中读取新的密码，而不是交互式输入密码。常用于shell脚本编程。





<blockquote>

> 
> [root@node1 ~]# echo "redhat" | passwd --stdin hadoop
Changing password for user hadoop.
passwd: all authentication tokens updated successfully.
> 
> 



> 
> * * *
> 
> 

</blockquote>




### 5、删除用户: userdel




**NAME**




userdel - delete a user account and related files




**SYNOPSIS**




userdel [options] LOGIN




这个命令很简单，就是删除一个用户。该命令会将用户从/etc/passwd和/etc/shadow中删除,如果该用户的组为私有组（和用户名同名的组），且该组不是其他用户的初始组，那么该组也会被同时删除。





<blockquote>

> 
> [root@node1 ~]# useradd nginx
[root@node1 ~]# id nginx
uid=1002(nginx) gid=1003(nginx) groups=1003(nginx)
[root@node1 ~]# userdel nginx
[root@node1 ~]# id nginx
id: nginx: no such user
> 
> 
</blockquote>




可以发现用户已经被删除了。但是观察一下/home 和 /var/mail目录。





<blockquote>

> 
> [root@node1 ~]# ls /home/
edmund hadoop nginx
[root@node1 ~]# ls /var/mail/
edmund hadoop nginx
> 
> 
</blockquote>




可以发现nginx的家目录和邮箱仍然留在系统中。




如果需要将这些信息一并删除，使用-r选项即可。




**-r, --remove** 将该用户的家目录和邮箱删除，位于家目录外的文件则需要用户手动删除。






* * *





### 6、用户组属性修改: groupmod




**NAME**




groupmod - modify a group definition on the system




**SYNOPSIS**




** groupmod [options] GROUP**




由于groupmod修改的其实就是/etc/group中的某些字段的内容，故groupmod的选项与groupadd基本一致，只是groupadd是在/etc/group中添加一行，而groupmod是修改一行而已。




**常用选项**




**-g, --gid GID** 修改用户组的GID。任何以该用户组作为初始组的用户都会保持这个初始组。任何属于该组的文件都必须手动修改文件的GID。




**-n, --new-name NEW_GROUP** 修改用户组名。






* * *





### 7、用户组删除: groupdel




**NAME**




groupdel - delete a group




**SYNOPSIS**




** groupdel [options] GROUP**




从系统中删除用户组。实际上就是删除/etc/group和/etc/gshadow中的一行。





<blockquote>

> 
> [root@node1 ~]# groupadd memcached
[root@node1 ~]# groupdel memcached
> 
> 
</blockquote>





* * *





### 8、用户组密码设置: gpasswd




**NAME**




gpasswd - administer /etc/group and /etc/gshadow




**SYNOPSIS**




** gpasswd [option] group**




该命令用于管理用户组成员和用户组密码。直接使用gpasswd GROUP 可以设定\修改GROUP的密码，该密码会在**newgrp**切换有效组时会要求输入,而对于组内成员和管理员来讲，可以免密切换。





<blockquote>

> 
> [root@node1 ~]# gpasswd root
Changing the password for group root
New Password:
Re-enter new password:
> 
> 
</blockquote>




**常用选项**




** -a, --add user** 将用户添加到指定组中





<blockquote>

> 
> [root@node1 ~]# gpasswd -a edmund root
Adding user edmund to group root
> 
> 
</blockquote>




** -d, --delete user** 将用户从指定组中移除





<blockquote>

> 
> [root@node1 ~]# gpasswd -d edmund root
Removing user edmund from group root
> 
> 
</blockquote>




** -A, --administrators user,...** 为指定组添加组管理员。组管理员可以使用-a,-d选项为本组添加或删除用户。






* * *





#### newgrp命令




**NAME**




newgrp - log in to a new group




**SYNOPSIS**




** newgrp [-] [group]**




newgrp命令可以在当前登录会话中切换有效组。如果指定 **-** 选项，newgrp将会在子shell中重新初始化用户环境，否则用户环境将保持不变。




如果发起该命令的用户不在指定group中，那么就会被要求输入该组的密码，否则，将直接切换。如果该组的密码为空，那么组外成员将无法通过newgrp切换到该组。





<blockquote>

> 
> [edmund@node1 ~]$ newgrp root
Password:
> 
> 
</blockquote>




切换成功，查看效果。





<blockquote>

> 
> [edmund@node1 ~]$ groups
root edmund
[edmund@node1 ~]$ touch edmund
[edmund@node1 ~]$ ls -l edmund
-rw-r--r--. 1 edmund root 0 Apr 2 06:27 edmund
> 
> 
</blockquote>




可以看出，groups命令列出的第一个组为root，表示当前有效组为root，创建一个文件后就可以发现，果然属于root组。






* * *





### 9、用户密码时间相关属性修改: chage




**NAME**




chage - change user password expiry information




**SYNOPSIS**




** chage [options] LOGIN**




该命令专用于修改密码时间属性，passwd能修改的密码时间属性chage都能修改，而且该命令的使用更加人性化。




常用选项




** -d, --lastday LAST_DAY** 修改上一次修改密码的日期。使用**YYYY-MM-DD**的格式指定日期。如果指定为0，那么意味着用户下次登录时会被强制要求修改密码。




**-E, --expiredate EXPIRE_DATE** 修改账户过期日期，使用**YYYY-MM-DD**的格式指定日期。指定为0表示表示该用户账户过期，无法登录。指定为-1表示移除该账户的过期日期。




**-I, --inactive INACTIVE** 修改账户密码过期天数，使用天数指定。-1表示移除该账户的密码过期天数。




**-m, --mindays MIN_DAYS** 修改密码最小使用时间，使用天数指定。0表示用户可以在任何时间修改密码。




**-M, --maxdays MAX_DAYS** 修改密码最大有效时间，使用天数指定。-1表示密码永久有效。




** -W, --warndays WARN_DAYS** 修改密码的警告期，使用天数指定。
