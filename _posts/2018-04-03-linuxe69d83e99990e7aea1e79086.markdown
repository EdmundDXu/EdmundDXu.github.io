---
author: edmund
comments: true
date: 2018-04-03 08:33:22+00:00
layout: post
link: http://118.25.17.78/blog/2018/04/03/linux%e6%9d%83%e9%99%90%e7%ae%a1%e7%90%86/
slug: linux%e6%9d%83%e9%99%90%e7%ae%a1%e7%90%86
title: Linux权限管理
wordpress_id: 162
categories:
- Linux随笔
post_format:
- 日志
tags:
- 命令
- 用户权限管理
---

## 一、linux权限概述




Linux是一个多用户多任务的操作系统，为了让多个用户之间能够协同工作而不至于发生随意篡改他人文件的情况，权限的存在是很有必要的。




用户、用户组和文件是密不可分的，所以接下来他们就衍生出了下面的关系。






 	
  * **用户拥有这个文件（owner）**

 	
  * **用户属于某个组，这个组拥有这个文件（group）**

 	
  * **用户不拥有这个文件（others）**




而权限是文件的一个元属性，所以在文件头中存放有下面三组权限。






 	
  * **拥有这个文件的用户的权限（owner mode）**

 	
  * **拥有这个文件的用户组的权限（group mode）**

 	
  * **不拥有这个文件的用户的权限（others mode）**




就此，我们发现，一个文件有三组权限，分别是这个文件的属主/拥有者（owner）的权限，这个文件的属组/用户组（group）的权限，除了上述两者外的人（others）的权限。




而权限一共有三种，分别是: **读权限 r（Readable）**、**写权限 w（Writeable）**、**执行权限 x（eXecutable）**。每三个权限为一组，就构成了一个文件的完整权限。




我们可以通过ls -l命令深入理解一下上述说法。





<blockquote>

> 
> [edmund@node1 ~]$ ls -l
total 0
-rwxrw-r--. 1 edmund edmund 0 Apr 2 08:26 a
> 
> 
</blockquote>




我们可以看见，这个文件最前面有10位字符，而第1位表示的是这个文件的类型，在此不进行详述。而后9位就是上面说到的三组权限。




第一组为rwx，表示拥有这个文件的用户的权限（以下称为owner），rwx表示文件的owner拥有对这个文件的读、写、执行权限。




第二组为rw-，表示拥有这个文件的用户组的权限（以下称为group），rw-表示文件的group拥有对这个文件的读、写权限，而-表示不具有该位的权限，即不具有可执行权限。




第三组为r--，表示不拥有这个文件的用户的权限（以下称为others），r--表示others拥有对这个文件的读权限，而不具有写、执行权限。




`总结一下上述知识，文件拥有三组权限，owner、group和others的权限，每组权限都有三类权限，读r、写w、执行x权限。`






* * *




很明显，rwx权限对文件的意义和对目录的意义是不同的，下面来讲一下三类权限对于文件和目录的意义。




**文件**




r：可使用文件查看类命令读取该文件内容




w：可修改文件内容




x：该文件可被内核识别为程序，并能够启动为一个进程




**目录**




r：可用ls命令查看该目录下的内容




w：可以在该目录下创建文件和删除文件（删除文件不需要对该文件具有w权限）




x：可用ls -l命令查看该目录下的内容，可以使用cd进入该目录






* * *




了解了权限对于文件和目录的意义之后，我们再回到这9位权限上。由于每组有三个权限，每个权限位只有两种表示形式，要么有（即为r或w或x），要么没有（即为 - ），这个和二进制非常类似，只有0和1两种表示方法。所以，这里使用1表示有该位权限，使用0表示没有该位权限，所以，每组权限都会有2^3=8种变化。





<blockquote>

> 
> **权限 二进制 八进制**
> 
> 

> 
> **---      000         0**
> 
> 

> 
> **--x      001         1**
> 
> 

> 
> **-w-     010         2**
> 
> 

> 
> **-wx    011          3**
> 
> 

> 
> **r--      100         4**
> 
> 

> 
> **r-x     101          5**
> 
> 

> 
> **rw-    110          6**
> 
> 

> 
> **rwx    111           7**
> 
> 
</blockquote>




由上面这张表，我们可以看出，每组权限都可以用一个八进制数字来表示所有八种变化。所以我们再来看一下ls -l命令的显示。





<blockquote>

> 
> [edmund@node1 ~]$ ls -l
total 0
-rwxrw-r--. 1 edmund edmund 0 Apr 2 08:26 a
> 
> 
</blockquote>




owner的权限: rwx（7）




group的权限: rw-（6）




others的权限: r--（4）




所以a文件的权限以八进制数字表示为764.






* * *





## 二、linux权限管理命令




### 1、修改文件权限: chmod




**NAME**




chmod - change file mode bits




**SYNOPSIS**




chmod [OPTION]... MODE[,MODE]... FILE...
chmod [OPTION]... OCTAL-MODE FILE...
chmod [OPTION]... --reference=RFILE FILE...




chmod有多种修改文件权限的格式，第一种为最大范围的修改：修改所有权限。





#### 格式一、




**chmod [OPTION] 三位八进制数字 FILE...**




比如，我要将a文件权限修改为rw-rw----,那么很明显这个对应的八进制数字为660，所以我们可以这样修改。





<blockquote>

> 
> [edmund@node1 ~]$ chmod 660 a
[edmund@node1 ~]$ ls -l a
-rw-rw----. 1 edmund edmund 0 Apr 2 08:26 a
> 
> 
</blockquote>




果然a文件的权限如我们所愿修改了。






* * *





#### 格式二、




上述修改方式必须修改所有的权限，即三组权限一起修改，如果不想三组权限一起修改，可以使用第二种格式。




在讲第二种格式前，要提到chmod中的一个概念：




`the user who owns it (u), other users in the file's group(g), other users not in the file's group (o), or all users (a).`




`即owner在chmod中称作u，group在chmod中称作g，others在chmod中称作o，而以上三个一起被称作a（all）。`




**chmod [OPTION]... MODE[,MODE]... FILE...**




这么看这个命令有点不好看懂，这里我拿一个案例做一个示范：将a文件的owner的权限修改为r-x，其他的权限不变。





<blockquote>

> 
> [root@node1 test]# chmod u=rx a
[root@node1 test]# ls -l a
-r-xrw----. 1 root root 0 Apr 3 02:55 a
> 
> 
</blockquote>




可以看到，a文件的owner权限变成了r-x。如果需要同时改多个组的权限，可以使用逗号分隔。下面我们将owner的权限修改为rwx，将group的权限修改为r--，将others的权限修改为r--。





<blockquote>

> 
> [root@node1 test]# chmod u=rwx,g=r,o=r a
[root@node1 test]# ls -l a
-rwxr--r--. 1 root root 0 Apr 3 02:55 a
> 
> 
</blockquote>




而如果需要将三组的权限修改成相同的一个权限，比如r--,可以使用a。下面我们将三组的权限全部修改为rw-。





<blockquote>

> 
> [root@node1 test]# chmod a=rw a
[root@node1 test]# ls -l a
-rw-rw-rw-. 1 root root 0 Apr 3 02:55 a
> 
> 
</blockquote>




成功。这种修改方式可以针对某个组的权限进行修改，但是必须修改整个组中的三位权限，如果想对某个组中的某位权限进行精确修改，可以使用第三种格式。






* * *





#### 格式三、




**chmod [OPTION]... MODE[,MODE]... FILE...**




当然，这种格式看起来和第二种是一样的，唯一的不同就是他们的MODE是不同的。下面我为a文件的owner添加x权限。





<blockquote>

> 
> [root@node1 test]# chmod u+x a
[root@node1 test]# ls -l a
-rwxrw-rw-. 1 root root 0 Apr 3 02:55 a
> 
> 
</blockquote>




为a文件的group和others移除w权限。





<blockquote>

> 
> [root@node1 test]# chmod g-w,o-w a
[root@node1 test]# ls -l a
-rwxr--r--. 1 root root 0 Apr 3 02:55 a
> 
> 
</blockquote>




是不是很方便呢，使用**u+x**表示为**owner**添加**x**权限，**g-w**，**o-w**表示为**group**和**others**移除**w**权限，使用**+\-**符号就可以很容易的修改某一位的权限了。




需要注意的是，还有一种用法是省略前面的[u|g|a]，直接使用[+\-] [r|w|x],这就相当于a [+\-] [r|w|x]。





<blockquote>

> 
> [root@node1 test]# touch b
[root@node1 test]# ls -l b
-rw-r--r--. 1 root root 0 Apr 8 01:36 b
[root@node1 test]# chmod +x b
[root@node1 test]# ls -l b
-rwxr-xr-x. 1 root root 0 Apr 8 01:36 b
> 
> 
</blockquote>




可以发现，三组权限都被加上了可执行权限x。






* * *




当然还有一种不常用的格式，将某些文件的权限修改为和指定文件相同，即参考指定文件，将某些文件的权限全部设置成指定文件的权限。




在此处我先创建一个新的文件。





<blockquote>

> 
> [root@node1 test]# touch b
[root@node1 test]# ls -l
total 0
-rwxr--r--. 1 root root 0 Apr 3 02:55 a
-rw-r--r--. 1 root root 0 Apr 3 03:07 b
> 
> 
</blockquote>




接下来参照a的权限，修改b的权限。





<blockquote>

> 
> [root@node1 test]# chmod --reference=a b
[root@node1 test]# ls -l
total 0
-rwxr--r--. 1 root root 0 Apr 3 02:55 a
-rwxr--r--. 1 root root 0 Apr 3 03:07 b
> 
> 
</blockquote>




现在b的权限是不是和a的相同了呢？这就是这个格式的作用。




这个命令有一个有时会用到的选项，不过不常用就是了。




** -R, --recursive**
change files and directories recursively 递归修改目录及其目录中文件的权限。由于很简单，就不举例说明了。





chmod命令任何用户都可以使用，但是只能修改自己的文件权限（管理员除外）。下面的命令只有root用户可以使用。






* * *





### 2、修改文件属主（owner）: chown




**NAME**




       chown - change file owner and group







**SYNOPSIS**




       chown [OPTION]... [OWNER][:[GROUP]] FILE...




       chown [OPTION]... --reference=RFILE FILE...




修改文件的所有者（owner）和属组（group），或者只修改其中一个。由于这个命令可以修改属组（group），所以基本上我们经常会使用到这个命令，而很少使用chgrp。





<blockquote>

> 
> [root@node1 test]# chown edmund a
[root@node1 test]# ls -l
total 0
-rwxr--r--. 1 edmund root 0 Apr 3 02:55 a
-rwxr--r--. 1 root root 0 Apr 3 03:07 b
> 
> 
</blockquote>




a文件的owner被修改成了edmund。下面我们修改b文件的owner和group为linux。





<blockquote>

> 
> [root@node1 test]# chown linux:linux b
[root@node1 test]# ls -l
total 0
-rwxr--r--. 1 edmund root 0 Apr 3 02:55 a
-rwxr--r--. 1 linux linux 0 Apr 3 03:07 b
> 
> 
</blockquote>




使用:分隔属主（owner）和属组（group），表示同时修改owner和group。下面我们再修改a文件的属组（group）为linux。





<blockquote>

> 
> [root@node1 test]# chown :linux a
[root@node1 test]# ls -l
total 0
-rwxr--r--. 1 edmund linux 0 Apr 3 02:55 a
-rwxr--r--. 1 linux linux 0 Apr 3 03:07 b
> 
> 
</blockquote>




简单地将:前面的owner留空，表示不修改owner，而只修改属组（group）。




和chmod一样，chown可以参考其他文件修改权限。




chown [OPTION]... --reference=RFILE FILE...




用法就和chown相同，这里就不再演示。




chown使用起来很简单，且有一个常用的选项-R，在我们搭建一些项目时会经常用到。




** -R, --recursive**
operate on files and directories recursively 递归修改目录及其包含的文件的属主或属组。






* * *





### 3、修改文件属组（group）: chgrp




**NAME**




chgrp - change group ownership




**SYNOPSIS**




chgrp [OPTION]... GROUP FILE...
chgrp [OPTION]... --reference=RFILE FILE...




修改文件的属组，可以使用chown实现同样的功能。




该命令也有-R选项，意义和chown中的-R选项相同。






* * *





### 4、user file-creation mask 用户文件创建掩码：umask




 不知道你有没有发现，在创建新的文件时，文件的权限总是固定的，而且往往不会包含可执行权限x，而在创建新的目录时，目录的权限也是固定的，而且往往只有属主拥有权限。




创建出来的新文件的权限。





<blockquote>

> 
> [root@node1 test]# touch new_file
[root@node1 test]# ls -l
total 0
-rw-r--r--. 1 root root 0 Apr 3 03:37 new_file
> 
> 
</blockquote>




创建出来的新目录的权限。





<blockquote>

> 
> [root@node1 test]# mkdir new_dir
[root@node1 test]# ls -l
total 0
drwxr-xr-x. 2 root root 6 Apr 3 03:38 new_dir
> 
> 
</blockquote>




这是为什么？参考上面提到的 **三类权限对于文件和目录的意义 **就能知道原因。




我们知道可执行文件其实就是包含一句句指令的集合，如果指令中有一些恶意的行为，那么将会危害到整个计算机系统。如果一个文件创建出来就具有可执行权限，那么不怀好意的人将能够随意执行它，导致系统的安全性大大降低。




而我们又知道如果用户对某个目录具有写权限，那么不管该用户对目录中的文件是否具有权限，该用户都能够随意删除目录中的文件。




edmund用户对new_dir目录具有写权限（others的权限）





<blockquote>

> 
> [edmund@node1 test]$ ls -l
total 0
drwxr-xrwx. 2 root root 23 Apr 3 03:43 new_dir
> 
> 
</blockquote>




但是edmund用户对new_dir中的test.file并没有wx权限，只能够浏览文件内容。





<blockquote>

> 
> [edmund@node1 test]$ cd new_dir/
[edmund@node1 new_dir]$ ls -l
total 0
-rw-r--r--. 1 root root 0 Apr 3 03:48 test.file
[edmund@node1 new_dir]$ rm test.file
rm: remove write-protected regular empty file ‘test.file’? y
[edmund@node1 new_dir]$ ls -l
total 0
[edmund@node1 new_dir]$
> 
> 
</blockquote>




edmund用户居然将root的文件删除了！你发现了吧！如果一个目录创建出来就对其他人具有写权限，那么他可以随意删除你的文件，这也导致系统的安全性降低。




所以，为了避免这种情况，linux定义了umask。默认情况下，**新创建出来的文件权限是0666，目录权限是0777**（0属于SUID和SGID的范畴，这里不做解释，只需要关注后三位即可）。而由于umask的存在，只有定义在umask中 可以存在的权限位，才能够通过umask，而定义在umask中不可以存在的权限位，就无法通过umask。这么说起来可能有些抽象，我下面来具体的说明一下。




先使用umask命令查看当前用户的umask。





<blockquote>

> 
> [root@node1 new_dir]# umask
0022
> 
> 
</blockquote>




那么我们就先假定当前的umask为0022（同样的，这里不需要关注第一个0，只考虑后三位就好了）




我们把022拆为二进制格式：000 010 010 。




观察这串二进制数字，存在0和1，在umask中为0的位表示允许通行，为1的位表示不允许通行。




我们知道新创建的文件权限为666，转化为二进制：110 110 110.




由于umask中定义为1的权限位不允许通行，所以我们需要将相应的权限位拿掉： 110 110 110 - 000 010 010 = 110 100 100，这就得到一个新文件的权限，转化为八进制为644，用符号来表示就是： rw-r--r--。




我们下面可以创建一个文件来验证一下：





<blockquote>

> 
> [root@node1 new_dir]# touch new_file
[root@node1 new_dir]# ls -l
total 0
-rw-r--r--. 1 root root 0 Apr 3 04:09 new_file
> 
> 
</blockquote>




是不是像我讲的那样呢？下面我们利用上面讲过的知识计算一下一个新目录的权限。




我们知道新创建的目录默认权限为777，转化为二进制：111 111 111.我们将相应的权限位拿掉：111 111 111 - 000 010 010 = 111 101 101,转化为八进制为755，用符号来表示就是：rwxr-xr-x。




那我们就新创建一个目录来验证一下。





<blockquote>

> 
> [root@node1 new_dir]# mkdir new_dir
[root@node1 new_dir]# ls -l
total 0
drwxr-xr-x. 2 root root 6 Apr 3 04:11 new_dir
-rw-r--r--. 1 root root 0 Apr 3 04:09 new_file
> 
> 
</blockquote>




果然如此。




<del>网上有些文章中说的umask的计算方法是拿默认的八进制文件权限直接减去umask，这是不对的。</del>




比如：umask为033，那我们用这个方法计算新建文件的权限：666-033=633（rw--wx-wx）




这个结果很明显是不对的，我们看一下umask的二进制（000 011 011），group和others的wx权限明明不允许通过，那么结果中怎么又出现了？




现在我们再用上面的方法计算。




110 110 110 - 000 011 011 = 110 100 100，转化为八进制为644，用符号表示就是rw-r--r--




`注意：umask只是不允许某位通行，而不是真的二进制减法，这里只是形象的描述一下而已。`




我们设置umask为033，然后创建一个新文件看看。





<blockquote>

> 
> [root@node1 new_dir]# umask 033
[root@node1 new_dir]# umask
0033
[root@node1 new_dir]# touch new_file.033
[root@node1 new_dir]# ls -l
total 0
-rw-r--r--. 1 root root 0 Apr 3 04:27 new_file.033
> 
> 
</blockquote>




看，文件的权限是不是如我所讲。




`对于root用户，由于其权限过大，所以为了限制一下root用户，故umask为022，表示属组（group）默认不具有写权限。而对于普通用户来说，umask为002.`




**现在再来讲一下umask这个命令，这个命令如果不加参数，就会输出当前的umask，如果后面跟上参数，就表示设置当前session的umask，如果重新登录就会失效，如果想要永久有效，需要定义在配置文件中。**
